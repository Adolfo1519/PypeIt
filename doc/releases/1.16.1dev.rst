
Version 1.16.1dev
=================

Installation Changes
--------------------

- Significant expansion of PypeIt's use of the cache system; see
  :ref:`data_installation`.  Important changes include that most cached files
  are now version dependent.  When upgrading to new versions of PypeIt, users
  should delete their cache and start fresh.

Dependency Changes
------------------

- Support added for numpy>=2.0.0; numpy<=2.0.0 should still be supported

Functionality/Performance Improvements and Additions
----------------------------------------------------

- Added the functionality to use slitless flats to create pixelflats. Note: new frametype
  `slitless_pixflat` is added to the PypeIt frametype list.
- The created pixelflats are stored in the reduction directory and in the PypeIt cache directory
  `data/static_calibs/{spectrograph_name}`.
- Added a functionality that allows, when multiple frames are combined, to scale each
  frame to have the same mean value before combining. To use this
  functionality, the new parameter ``scale_mean`` should be set to ``True``.

Instrument-specific Updates
---------------------------

- Improved LRIS frame typing, including the typing of slitless flats and sky flats.
- Improved HIRES frame typing and configuration setup.

Script Changes
--------------

- Modifications to the cache-related :ref:`install_scripts` to accommodate
  expansion of and changes to the cache system.
- Added ``pypeit_clean_cache`` script to facilitate both viewing and removing
  files in the cache.
- Added ``pypeit_show_pixflat`` script to inspect the (slitless) pixel flat
  generated during the reduction and stored in ``data/static_calibs/{spectrograph_name}``

Datamodel Changes
-----------------

Under-the-hood Improvements
---------------------------

- Introduced :class:`~pypeit.pypeitdata.PypeItDataPaths` to handle all
  interactions with the ``pypeit/data`` directory, which provides a unified
  interface for accessing on-disk and cached files.

Bug Fixes
---------

- Fix a MAJOR BUT SUBTLE bug in the use of ``numpy.argsort``. When using ``numpy.argsort``
  the parameter kind='stable' should be used to ensure that a sorting algorithm more robust
  than "quicksort" is used.

