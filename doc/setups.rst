.. highlight:: rest

******
Setups
******

.. index:: Setups

Overview
========

PYPIT distinguishes between various configurations
for a given instrument when processing calibrations,
generating Master frames, and performing the data
reduction.  This Table summarizes the parameters that
specify a unique setup:

========= ======== ====== ======== =======================================
Element   Setting  Type   Example    Description
========= ======== ====== ======== =======================================
detector  binning  str    2,2      On-chip binning of the detector
 ..       det      int    1        Index of the detector; starts at 1
 ..       naxis0   int    2048     x dimension of the image
 ..       naxis1   int    2048     y dimension of the image
dichroic  ...      str    560      Dichroic name
disperser angle    float  23.4     Number specifying tilt of the grating
 ..       name     str    600/4000 Name of the dispersing element
slit      decker   str    long_1.0 Name of decker or slit mask
 ..       slitlen  float  120.     Number describing slit length
 ..       slitwid  float  1.       Number describing slit width
========= ======== ====== ======== =======================================

Each setup is given a unique setup ID value which is a
two digit integer starting at 01.

If you tend to observe with one instrument configuration
and with a simple set of calibrations, then setup should
be straightforward.  If you use multiple configurations
(e.g. gratings, grating tilts), then one must pay more
careful attention to the setups.

pypit_setup
===========

PYPIT includes a script that one may execute (*recommended*)
to initiate the data reduction process.  This script helps organize
the primary data reduction process that follows.  It also
generates a default Settings File.

Execution
---------

The setup script requires two inputs: the root of the data
files (with the full path) and the instrument name.  Here is an example::

    pypit_setup /Users/xavier/Keck/LRIS/data/2016apr06/Raw/LB lris_blue

The code will search for all FITS files with the inputted root.
Note that the root should **not** contain a wild-card.

Alternatively, one can generate a Settings File (with extension .pypit)
and add `run setup True` to the file.

Note that both of these options sets default values in the codes
and over-rides other user settings.

Outputs
-------

The pypit_setup script generates several outputs.

Setup File
++++++++++

The most important file generated by pypit_setup
is a .setup file, e.g. lris_blue_2016-Nov-18.setup.  This file describes
all of the instrument configurations that were parsed by the
code for the input raw files.  It is a YAML file and each
top-level key indicates the setup values, e.g. '01'.
Note that PYPIT generates a unique setup for every detector in the
instrument.

The remainder of the information in the .setup file describes
the instrument configuration.

**Important:**  There can be only one .setup file in a working
PYPIT reduction folder for each instrument being reduced.

Here is sample output for the LRISb instrument::

    '01':
      detector: {binning: '2,2', det: 1, naxis0: None, naxis1: None}
      dichroic: '560'
      disperser: {angle: None, name: 600/4000}
      slit: {decker: long_1.0, slitlen: None, slitwid: None}


Data Listings
+++++++++++++

Two files are generated which describe the input raw files,
line by line.  These have .lst and .xml extensions.
Data pulled from the header are shown here.  In addition, the
frametype assigned by PYPIT is specified.  If any of these are
mis-specified (possible), they should be correctly specified
in your Settings File.

.. _groupings:

Groupings
+++++++++

A .group file is generated which describes how PYPIT will
group calibrations, science, and standard star frames when
performing the reduction.  If there are incorrect or if unwanted
calibration files are listed, these should be suppressed with
the Settings File (alternatively one can remove them from the raw data
folder, but we *recommend* again this practice).

Setups that only differ by detector are grouped together in
the .group file. For example, '01_02' is a single instrument configuration
with two detectors.  The next configuration would have '03_04', etc.

Here is example output of a .group file for Kast (which has
only 1 detector per spectrograph)::

    '01':
      arc: [b1.fits.gz]
      bias: [b23.fits.gz, b22.fits.gz, b21.fits.gz]
      pixelflat: [b13.fits.gz, b12.fits.gz, b11.fits.gz]
      science: [b27.fits.gz, b28.fits.gz, b29.fits.gz]
      sciobj: [J1217p3905, J1217p3905, J1217p3905]
      slitflat: [b13.fits.gz, b12.fits.gz, b11.fits.gz]
      standard: [b24.fits.gz]
      stdobj: [Feige 66]
      trace: []

Note: when generated by the pypit_setup script, the .group file
will list only the first arc frame found.


Modifications
-------------

If the .setup file does not indicate all of your instrument
configurations or the .group file is missing expected
calibrations, this is most likely because you either have
not included all of your raw frames or a number of files have
been misclassified by the code.

Inspect the listing (.lst file) to confirm all of the frames
have been examined and check the designated frametype.

If you have not included all of the frames, add one or more entries
to the data block in the .pypit file (see :doc:`pypit_file` for
further details).

If you wish to manually set the frametype of a file, add
this to the spec block in the .pypit file.

Remove the existing .setup file and rerun the pypit_setup
script on the modified .pypit file, e.g.::

    pypit_setup -pyp_file lris_blue_2016-Nov-23.pypit lris_blue


