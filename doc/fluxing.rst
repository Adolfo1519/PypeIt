=======
Fluxing
=======

Overview
========
Fluxing is done after the main run of PypeIt.

It is a two step process of generating a `Sensitivity Function`_
and then `Applying the Sensitivity Function`_.
We describe each in turn



Sensitivity Function
====================

The sensitivity function is generated from the
:doc:`out_spec1D` file of a processes standard star.

PypeIt uses an archived fluxed spectrum from either
the `CALSPEC calibration database <http://stsci.edu/hst/observatory/crds/calspec.html>`_
or one of the files we have grabbed from
`ESO <https://www.eso.org/sci/observing/tools/standards/spectra/stanlis.html>`_.
If you observed something else, see `Adding a Standard Star`_.


The sensitivity function is generated by dividing the standard
star's flux by the
standard star's counts per second. This is then multiplied to the
science object's counts per second to yield a fluxed science
spectrum.

The sensitivity function is written to disk as a FITS file.

pypeit_sensfunc
---------------

The process is mediated by the *pypeit_sensfunc* script.
Its usage (*pypeit_sensfunc -h*) describes its functionality.
Here is a typical call::

    pypeit_sensfunc spec1dfile -o Keck_LRISr_600_7500_sens.fits

This analyzes the standard star spectrum in *spec1dfile* and writes
the sensitivity file to *Keck_LRISr_600_7500_sens.fits*.

Here are the common options used:

--multi
+++++++

For some instruments (e.g. *keck_deimos*, *gemini_gmos*), the spectrum goes
across multiple detectors.  You can have the sensitivity function
handle this by using the --multi option, e.g.::

    pypeit_sensfunc --multi 3,7

--debug
+++++++

Throws a number of plots to the screen

--algorithm
+++++++++++

The algorithm options are:
 - UVIS = Should be used for data with lambda < 7000A.
   No detailed model of telluric absorption but corrects for atmospheric extinction.
 - IR   = Should be used for data with lambbda > 7000A.
   Peforms joint fit for sensitivity function and telluric absorption using HITRAN models.


Applying the Sensitivity Function
=================================

Flux
----

To flux one or more spec1d files, generate a `flux read`, e.g.::

    flux read
      spec1d_UnknownFRBHostY_vlt_fors2_2018Dec05T020241.687.fits FRB181112_fors2_1.fits
      spec1d_UnknownFRBHostY_vlt_fors2_2018Dec05T021815.356.fits FRB181112_fors2_2.fits
      spec1d_UnknownFRBHostY_vlt_fors2_2018Dec05T023349.816.fits FRB181112_fors2_3.fits
    flux end

The first entry of each row is the spec1d file to be fluxed
and the second provides the output filename.
One separates the two entries by *a single space*!

.. _fluxspec-script:

Flux Spec Script
================

It may be preferential to flux the spectra after the main reduction
(i.e. run_pypeit).  PypeIt provides a script to guide the process.
Here is the usage::

    pypeit_flux_spec FRB181112.flux -h
    usage: pypeit_flux_spec [-h] [--debug] [--plot] [--par_outfile] flux_file

    Parse

    positional arguments:
      flux_file      File to guide fluxing process

    optional arguments:
      -h, --help     show this help message and exit
      --debug        show debug plots?
      --plot         Show the sensitivity function?
      --par_outfile  Output to save the parameters

The parameters used to guide the process are written to par_outfile
(default = fluxing.par) and --plot will generate a simple plot of
the sensitivity function.

.. _fluxspec-class:

FluxSpec Class
==============

The guts of the flux algorithms are guided by the FluxSpec class.
See the
`FluxSpec.ipynb <https://github.com/pypeit/pypeit/blob/master/doc/nb/FluxSpec.ipynb>`_
Notebook on GitHub (in doc/nb) for some usage examples, although
we recommend that most users use the :ref:`fluxspec-script`.

.. _fluxspec-file:

Example File
============

Here is a complete example file::

    # User-defined fluxing parameters
    [rdx]
       spectrograph = vlt_fors2
    [fluxcalib]
       balm_mask_wid = 12.
       #std_file = spec1d_STD_vlt_fors2_2018Dec04T004939.578.fits
       sensfunc = bpm16274_fors2.fits

    flux read
      spec1d_UnknownFRBHostY_vlt_fors2_2018Dec05T020241.687.fits FRB181112_fors2_1.fits
      spec1d_UnknownFRBHostY_vlt_fors2_2018Dec05T021815.356.fits FRB181112_fors2_2.fits
      spec1d_UnknownFRBHostY_vlt_fors2_2018Dec05T023349.816.fits FRB181112_fors2_3.fits
    flux end

Note the std_file is commented out to avoid remaking the sensitivity function.


Fluxing Output
==============

Science
-------
The resulting fluxed science spectrum, :math:`\rm f_\lambda`,
is given in units of :math:`10^{-17}\,\rm ergs/s/cm^2/Angstrom`
and is stored in the 'box_flam' extension of the extracted 1D
spectrum. If an optimal extraction was successful, there also
exists an 'opt_flam' extension in the 1D spectrum.

Standard
--------
The 1D extracted standard spectrum is also saved as an output
of the fluxing routine. The counts and fluxed standard spectrum
are available in the 'box_counts' and 'box_flam' extensions,
respectively. The fluxed spectrum saved here is the fluxed standard,
using the sensitivity function generated from itself (rather than
the archived fluxed standard star loaded from CALSPEC), and can be
examined and compared to the expected :math:`\rm f_\lambda` as a
sanity check.

Troubleshooting
===============

Problem with bspline knot
-------------------------

Adding a Standard Star
======================

If your star is not in the repository you can add in a new
solution if it is in the
`ESO database <https://www.eso.org/sci/observing/tools/standards/spectra/stanlis.html>`_.

You will need to place their .dat file in pypeit/data/standards/esofil/
and then edit the *esofil_info.txt* file in their accordingly.
Extra kudos if you submit this as a PR for others benefit.

If your standard star is even more non-traditional, contact
the developers.
