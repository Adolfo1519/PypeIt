name: CI Tests

on:
  push:
    branches:
    - release
    - develop
  pull_request:

env:
  SETUP_XVFB: True  # avoid issues if something tries to open a GUI window

jobs:
  ci-tests:
    name: Tox env ${{ matrix.python }}-${{ matrix.toxenv }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python: ['3.9', '3.10', '3.11']
        toxenv: [test, test-alldeps-cov, test-linetoolsdev, test-gingadev, test-astropydev, conda]
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip tox
    - name: Test with tox
      run: |
        tox -e ${{ matrix.toxenv }}
    - name: Upload coverage to codecov
      if: "contains(matrix.toxenv, '-cov')"
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV }}
        file: ./coverage.xml
        fail_ci_if_error: true

  os-tests:
    name: Python ${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # set this to false for now so windows failures don't prevent macos test from finishing
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python: ['3.9', '3.10', '3.11']
        toxenv: [test-alldeps]
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip tox
    - name: Test with tox
      run: |
        tox -e ${{ matrix.toxenv }}

  centos:
    # Some PypeIt users have to run under CentOS and have run into unique issues. GitHub Actions does not
    # provide CentOS as a runtime environment like it does Ubuntu. However, it can be used by running
    # it as a container within a provided Ubuntu environment.
    name: CentOS ${{ matrix.centos_ver }} using conda
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Test CentOS 7
        centos_ver: [7]

    container:
      image: "centos:${{ matrix.centos_ver }}"

    steps:
    - name: Install base CentOS dependencies
      run: |
        yum install -y https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
        yum update -y && yum install -y wget git gcc libgomp
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install and configure miniconda
      # Restrict to 3.9 until we migrate to 3.10
      run: |
        wget https://repo.anaconda.com/miniconda/Miniconda3-py39_22.11.1-1-Linux-x86_64.sh -O miniconda.sh
        bash ./miniconda.sh -b -p /conda
        /conda/bin/conda update -y --all
        /conda/bin/conda init
    - name: Set up conda environment and install base dependencies
      run: |
        source ~/.bashrc && conda env create -f environment-test.yml
    - name: Test with pytest within the conda environment
      run: |
        source ~/.bashrc && conda activate pypeit-test && pip install -e .[test] --no-deps && pytest

  codestyle:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Python codestyle check
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pycodestyle
    - name: Check for runtime errors using pycodestyle
      run: |
        pycodestyle pypeit --count --select=E9
